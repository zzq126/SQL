{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exercise 04 - Due Friday, October 21 at 12pm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Objectives: Gain experience loading a CSV dataset into a database model you define yourself and using SQL to explore its contents. Explore the data by writing and executing a number of SQL queries using common syntax and functions and describing your findings.\n",
    "\n",
    "Grading criteria: The tasks should all be completed, and questions should all be answered with SQL queries in the space provided, unless a text answer is requested. Results should be correct, according to the embedded tests. The notebook itself should be completely reproducible; from start to finish, another person should be able to use the same code to obtain the same results as yours. Note that you will receive no more than partial credit if you do not add text/markdown cells explaining your thinking at each major step in each problem.\n",
    "\n",
    "Deadline: Friday, October 21, 12pm. Submit your notebook to Blackboard and push it to your GitHub repository."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup - obtain data and create database"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The US City Open Data Census has data on restaurant inspections from all over the country. Let's take a look at data from Albuquerque. Note: metadata and other details for this dataset are available at http://data.cabq.gov/business/foodinspections/.\n",
    "\n",
    "Fyi, to save you a step, I've converted this file into a clean CSV file by using the dos2unix command to change its line endings and to switch it to use commas instead of tabs using csvformat -t inputfile.csv > outputfile.csv.\n",
    "\n",
    "First we download the dataset:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2016-10-24 15:13:19--  https://raw.githubusercontent.com/gwsb-istm-6212-fall-2016/syllabus-and-schedule/master/exercises/abq-food-inspections-fy2010.csv\n",
      "Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 151.101.32.133\n",
      "Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|151.101.32.133|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 5025226 (4.8M) [text/plain]\n",
      "Saving to: ‘abq-food-inspections-fy2010.csv’\n",
      "\n",
      "abq-food-inspection 100%[=====================>]   4.79M  --.-KB/s   in 0.07s  \n",
      "\n",
      "2016-10-24 15:13:20 (69.6 MB/s) - ‘abq-food-inspections-fy2010.csv’ saved [5025226/5025226]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget https://raw.githubusercontent.com/gwsb-istm-6212-fall-2016/syllabus-and-schedule/master/exercises/abq-food-inspections-fy2010.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Problem 1 - examine the data (35 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Use csvstat and other tools as you see fit and observe its contents. Review the metadata definitions linked to above. Describe what you see: What do all the columns mean? Are there null values? Which columns interest you the most? Which columns present some complications or questions you would like to ask?\n",
    "\n",
    "Insert a combination of code and text/markdown cells here to review the data and describe what you find."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "!mv abq-food-inspections-fy2010.csv abq.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  1: FACILITY_NAME\r\n",
      "  2: FACILITY_KEY\r\n",
      "  3: SITE_ADDRESS\r\n",
      "  4: CITY\r\n",
      "  5: STATE\r\n",
      "  6: ZIP\r\n",
      "  7: OWNER_KEY\r\n",
      "  8: OWNER_NAME\r\n",
      "  9: NATURE_OF_BUSINESS\r\n",
      " 10: STREET_NUMBER\r\n",
      " 11: STREET_NAME\r\n",
      " 12: STREET_TYPE\r\n",
      " 13: POST_DIRECTIONAL\r\n",
      " 14: PHONE\r\n",
      " 15: PROGRAM_CATEGORY\r\n",
      " 16: PROGRAM_CATEGORY_DESCRIPTION\r\n",
      " 17: INSPECTION_DATE\r\n",
      " 18: INSPECTION_TYPE\r\n",
      " 19: INSPECTION_DESC\r\n",
      " 20: SERIAL_NUM\r\n",
      " 21: ACTION_CODE\r\n",
      " 22: ACTION_DESC\r\n",
      " 23: RESULT_CODE\r\n",
      " 24: RESULT_DESC\r\n",
      " 25: VIOLATION_CODE\r\n",
      " 26: VIOLATION_DESC\r\n",
      " 27: INSPECTION_MEMO\r\n"
     ]
    }
   ],
   "source": [
    "!csvcut -n abq.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What do all the columns mean?\n",
    "\n",
    "1: FACILITY_NAME is the name of inspection facility\n",
    "\n",
    "2: FACILITY_KEY is the unique identification key of the inspection facility\n",
    "\n",
    "3: SITE_ADDRESS is the stress address of the inspection facility\n",
    "\n",
    "4: CITY is the city of the inspection facility\n",
    "\n",
    "5: STATE is the state of the inspection facility\n",
    "\n",
    "6: ZIP is the zip of the inspection facility\n",
    "\n",
    "7: OWNER_KEY is the unique identification key of the owner of inspection facility\n",
    "\n",
    "8: OWNER_NAME is the name of the owner of the inspection facility\n",
    "\n",
    "9: NATURE_OF_BUSINESS is the type of business\n",
    "\n",
    "10: STREET_NUMBER is the stress number of the inspection facility\n",
    "\n",
    "11: STREET_NAME is the stress name of the inspection facility\n",
    "\n",
    "12: STREET_TYPE is the stress type of the inspection facility\n",
    "\n",
    "13: POST_DIRECTIONAL is the postical direction of the inspection facility\n",
    "\n",
    "14: PHONE is the phone of the inspection facility\n",
    "\n",
    "15: PROGRAM_CATEGORY is the id that indicate the type of facility inspection\n",
    "\n",
    "16: PROGRAM_CATEGORY_DESCRIPTION is the description of the id that indicate the type of facility inspection\n",
    "\n",
    "17: INSPECTION_DATE is the date of inspection\n",
    "\n",
    "18: INSPECTION_TYPE is code for type of inspection\n",
    "\n",
    "19: INSPECTION_DESC is the description of inspection type\n",
    "\n",
    "20: SERIAL_NUM is the unique id for the inspection activity\n",
    "\n",
    "21: ACTION_CODE is the code of taken action\n",
    "\n",
    "22: ACTION_DESC is the description of take action\n",
    "\n",
    "23: RESULT_CODE is the code of inspection result\n",
    "\n",
    "24: RESULT_DESC is the description of inspection result\n",
    "\n",
    "25: VIOLATION_CODE is the code for the violation\n",
    "\n",
    "26: VIOLATION_DESC is the escription of the violation\n",
    "\n",
    "27: INSPECTION_MEMO is the note from the inspection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "|----------------+-------+---------------------------+-------|\n",
      "|       93 46323 | 43607 | RESTAURANT                |       |\n",
      "|----------------+-------+---------------------------+-------|\n",
      "|       85 65863 | 60564 | SELLING ICE CREAM         | BLVD  |\n",
      "|       68 80949 | 73886 | FOOD BANK                 |       |\n",
      "|       68 32817 | 30613 | SEASONAL VENUE-FIXED LOCA | BLVD  |\n",
      "|       66 91825 | 80274 | CONVIENENCE STORE         | AV    |\n",
      "|       65 64527 | 59350 | MOBILE PUSH CARTS         | ST    |\n",
      "|       64 54654 | 50853 | SUPERMARKET               | BLVD  |\n",
      "|       61 93519 | 84586 | THAI FOOD                 | DR    |\n",
      "|       61 91821 | 80274 | CONVIENENCE STORE         | AV    |\n",
      "|       61 90924 | 610   | RESTAURANT                | ST    |\n",
      "|----------------+-------+---------------------------+-------|\n",
      "sort: write failed: standard output: Broken pipe\n",
      "sort: write error\n",
      "|-------------+------+------------------------------------------+---|\n",
      "|     4084 NE | 0406 | Food Service Establishment               |   |\n",
      "|-------------+------+------------------------------------------+---|\n",
      "|     1972 NW | 0406 | Food Service Establishment               |   |\n",
      "|     1361 SE | 0406 | Food Service Establishment               |   |\n",
      "|      524 NE | 0601 | Retail -Grocery                          |   |\n",
      "|      522 NE | 0607 | Retail - Self Service & Prepackage Foods |   |\n",
      "|      483 NE | 0501 | Bar                                      |   |\n",
      "|      460 SW | 0406 | Food Service Establishment               |   |\n",
      "|      459 NE | 0606 | Retail - Prepackage Only                 |   |\n",
      "|      408 NE | 0408 | School                                   |   |\n",
      "|      384 NE | 0402 | Childcare                                |   |\n",
      "|-------------+------+------------------------------------------+---|\n",
      "|--------------------------------------+-----------+----+-----------------|\n",
      "|       61 ROUTINE FOOD INSPECTION     | DA0045731 | 11 | APPROVED        |\n",
      "|--------------------------------------+-----------+----+-----------------|\n",
      "|       61 PRE-OPENING FOOD INSPECTION | DA0059230 | 11 | APPROVED        |\n",
      "|       61 PRE-OPENING FOOD INSPECTION | DA0047720 | 11 | APPROVED        |\n",
      "|       61 PRE-OPENING FOOD INSPECTION | DA0047290 | 11 | APPROVED        |\n",
      "|       61 New Business Inspection     | DA0045676 | 11 | APPROVED        |\n",
      "|       14 ROUTINE FOOD INSPECTION     | DA8509302 | 06 | UNSATISFACTORY  |\n",
      "|       14 ROUTINE FOOD INSPECTION     | DA0041098 | 11 | APPROVED        |\n",
      "|       13 ROUTINE FOOD INSPECTION     | DA8508698 | 06 | UNSATISFACTORY  |\n",
      "|       13 ROUTINE FOOD INSPECTION     | DA7756764 | 06 | UNSATISFACTORY  |\n",
      "|       12 ROUTINE FOOD INSPECTION     | DA7007213 | 06 | UNSATISFACTORY  |\n",
      "|--------------------------------------+-----------+----+-----------------|\n",
      "sort: write failed: standard output: Broken pipe\n",
      "sort: write error\n",
      "sort: fflush failed: standard output: Broken pipe\n",
      "sort: write error\n",
      "|-------------+----------------+----+---|\n",
      "|     5587 03 | IN COMPLIANCE  | 55 |   |\n",
      "|-------------+----------------+----+---|\n",
      "|     3408 03 | IN COMPLIANCE  | 00 |   |\n",
      "|     1647 00 | NOT APPLICABLE | 68 |   |\n",
      "|      562 03 | IN COMPLIANCE  |    |   |\n",
      "|      472 03 | IN COMPLIANCE  | 42 |   |\n",
      "|      444 00 | NOT APPLICABLE | 55 |   |\n",
      "|      425 03 | IN COMPLIANCE  | 35 |   |\n",
      "|      409 03 | IN COMPLIANCE  | 21 |   |\n",
      "|      406 03 | IN COMPLIANCE  | 38 |   |\n",
      "|      386 03 | IN COMPLIANCE  | 45 |   |\n",
      "|-------------+----------------+----+---|\n"
     ]
    }
   ],
   "source": [
    "!csvcut -c2,7,9,12 abq.csv | csvsort | uniq -c | sort -rn | head -10 | csvlook\n",
    "!csvcut -c13,15,16,18 abq.csv | csvsort | uniq -c | sort -rn | head -10 | csvlook\n",
    "!csvcut -c19,20,21,22 abq.csv | csvsort | uniq -c | sort -rn | head -10 | csvlook\n",
    "!csvcut -c23,24,25,27 abq.csv | csvsort | uniq -c | sort -rn | head -10 | csvlook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  1. FACILITY_NAME\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 2615\n",
      "\t5 most frequent values:\n",
      "\t\tSMITHS FOOD AND DRUG CENTERS INC:\t154\n",
      "\t\tISOTOPES PARK - OVATIONS:\t93\n",
      "\t\tPER EHSII CECELIA GARCIA OOB LA REYNA DEL SUR:\t85\n",
      "\t\tISLETA AMPHITHEATER:\t68\n",
      "\t\tECHO INC:\t68\n",
      "\tMax length: 77\n",
      "  2. FACILITY_KEY\n",
      "\t<class 'int'>\n",
      "\tNulls: False\n",
      "\tMin: 13\n",
      "\tMax: 101482\n",
      "\tSum: 820405773\n",
      "\tMean: 46730.79135338346\n",
      "\tMedian: 50866.0\n",
      "\tStandard Deviation: 32659.794578837962\n",
      "\tUnique values: 2835\n",
      "\t5 most frequent values:\n",
      "\t\t46323:\t93\n",
      "\t\t65863:\t85\n",
      "\t\t32817:\t68\n",
      "\t\t80949:\t68\n",
      "\t\t91825:\t66\n",
      "  3. SITE_ADDRESS\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 2456\n",
      "\t5 most frequent values:\n",
      "\t\t1601 AVENIDA CESAR CHAVEZ SE:\t94\n",
      "\t\t644 OLD COORS BLVD SW:\t85\n",
      "\t\t8601 CENTRAL AV NE:\t77\n",
      "\t\t2200 SUNPORT BLVD SE:\t75\n",
      "\t\t5210 CENTRAL AV SE:\t73\n",
      "\tMax length: 35\n",
      "  4. CITY\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tValues: ALBUQUERQUE\n",
      "  5. STATE\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tValues: NM, 87\n",
      "  6. ZIP\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 48\n",
      "\t5 most frequent values:\n",
      "\t\t87110:\t1996\n",
      "\t\t87108:\t1976\n",
      "\t\t87102:\t1601\n",
      "\t\t87106:\t1568\n",
      "\t\t87109:\t1552\n",
      "\tMax length: 10\n",
      "  7. OWNER_KEY\n",
      "\t<class 'int'>\n",
      "\tNulls: False\n",
      "\tMin: 11\n",
      "\tMax: 87302\n",
      "\tSum: 644760848\n",
      "\tMean: 36725.953975848715\n",
      "\tMedian: 33747.0\n",
      "\tStandard Deviation: 29428.207216739836\n",
      "\tUnique values: 1892\n",
      "\t5 most frequent values:\n",
      "\t\t1838:\t792\n",
      "\t\t3537:\t321\n",
      "\t\t1272:\t228\n",
      "\t\t36280:\t156\n",
      "\t\t80274:\t155\n",
      "  8. OWNER_NAME\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 1852\n",
      "\t5 most frequent values:\n",
      "\t\tAPS:\t792\n",
      "\t\tSMITHS FOOD AND DRUG CENTERS INC:\t321\n",
      "\t\tCIRCLE K STORES INC:\t277\n",
      "\t\tALBERTSONS:\t228\n",
      "\t\tWAL MART STORES EAST  LP:\t156\n",
      "\tMax length: 82\n",
      "  9. NATURE_OF_BUSINESS\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 594\n",
      "\t5 most frequent values:\n",
      "\t\tRESTAURANT:\t4994\n",
      "\t\tFOOD SERVICE:\t691\n",
      "\t\tGROCERY:\t618\n",
      "\t\tBAR/RESTAURANT:\t508\n",
      "\t\tAPS SCHOOL FOOD SERVICE:\t470\n",
      "\tMax length: 25\n",
      " 10. STREET_NUMBER\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 1349\n",
      "\t5 most frequent values:\n",
      "\t\t6600:\t216\n",
      "\t\t10000:\t152\n",
      "\t\t300:\t143\n",
      "\t\t2200:\t127\n",
      "\t\t8100:\t125\n",
      "\tMax length: 7\n",
      " 11. STREET_NAME\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 404\n",
      "\t5 most frequent values:\n",
      "\t\tCENTRAL:\t1898\n",
      "\t\tMENAUL:\t928\n",
      "\t\tCOORS:\t918\n",
      "\t\tMONTGOMERY:\t727\n",
      "\t\tSAN MATEO:\t707\n",
      "\tMax length: 24\n",
      " 12. STREET_TYPE\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 13\n",
      "\t5 most frequent values:\n",
      "\t\tBLVD:\t7636\n",
      "\t\tAV:\t3005\n",
      "\t\tST:\t2065\n",
      "\t\tRD:\t1900\n",
      "\t\tDR:\t995\n",
      "\tMax length: 4\n",
      " 13. POST_DIRECTIONAL\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tValues: NW, SW, N, NE, SE\n",
      " 14. PHONE\n",
      "\t<class 'int'>\n",
      "\tNulls: True\n",
      "\tMin: 2471094\n",
      "\tMax: 505345566137310\n",
      "\tSum: 2608539289633190\n",
      "\tMean: 161719732773.29138\n",
      "\tMedian: 5053454060.0\n",
      "\tStandard Deviation: 8895791545525.992\n",
      "\tUnique values: 2279\n",
      "\t5 most frequent values:\n",
      "\t\t9153321301:\t101\n",
      "\t\t3037929467:\t100\n",
      "\t\t5052224033:\t94\n",
      "\t\t3109680646:\t85\n",
      "\t\t2122383000:\t68\n",
      " 15. PROGRAM_CATEGORY\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 25\n",
      "\t5 most frequent values:\n",
      "\t\t0406:\t7969\n",
      "\t\t0601:\t1159\n",
      "\t\t0607:\t894\n",
      "\t\t0606:\t865\n",
      "\t\t0501:\t832\n",
      "\tMax length: 4\n",
      " 16. PROGRAM_CATEGORY_DESCRIPTION\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 24\n",
      "\t5 most frequent values:\n",
      "\t\tFood Service Establishment:\t7969\n",
      "\t\tRetail -Grocery:\t1159\n",
      "\t\tRetail - Self Service & Prepackage Foods:\t894\n",
      "\t\tRetail - Prepackage Only:\t865\n",
      "\t\tSchool:\t832\n",
      "\tMax length: 40\n",
      " 17. INSPECTION_DATE\n",
      "\t<class 'datetime.date'>\n",
      "\tNulls: False\n",
      "\tMin: 2009-07-01\n",
      "\tMax: 2010-06-30\n",
      "\tUnique values: 258\n",
      "\t5 most frequent values:\n",
      "\t\t2009-12-16:\t184\n",
      "\t\t2009-09-10:\t159\n",
      "\t\t2009-09-25:\t148\n",
      "\t\t2009-11-04:\t133\n",
      "\t\t2009-10-01:\t131\n",
      " 18. INSPECTION_TYPE\n",
      "\t<class 'NoneType'>\n",
      "\tNulls: True\n",
      "\tValues: \n",
      " 19. INSPECTION_DESC\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 15\n",
      "\t5 most frequent values:\n",
      "\t\tROUTINE FOOD INSPECTION:\t12439\n",
      "\t\tEMERGENCY RESPONSE:\t1987\n",
      "\t\tNew Business Inspection:\t1005\n",
      "\t\tPRE-OPENING FOOD INSPECTION:\t743\n",
      "\t\tADDITIONAL SERVICE PROVIDED:\t439\n",
      "\tMax length: 32\n",
      " 20. SERIAL_NUM\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 9046\n",
      "\t5 most frequent values:\n",
      "\t\tDA0047290:\t61\n",
      "\t\tDA0047720:\t61\n",
      "\t\tDA0045731:\t61\n",
      "\t\tDA0059230:\t61\n",
      "\t\tDA0045676:\t61\n",
      "\tMax length: 9\n",
      " 21. ACTION_CODE\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 8\n",
      "\t5 most frequent values:\n",
      "\t\t11:\t14080\n",
      "\t\t00:\t2800\n",
      "\t\t09:\t382\n",
      "\t\t06:\t264\n",
      "\t\t10:\t21\n",
      "\tMax length: 2\n",
      " 22. ACTION_DESC\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 8\n",
      "\t5 most frequent values:\n",
      "\t\tAPPROVED:\t14080\n",
      "\t\tNON-GRADED:\t2800\n",
      "\t\tANNUAL STICKER ISSUED:\t382\n",
      "\t\tUNSATISFACTORY:\t264\n",
      "\t\tANNUAL STICKER NOT ISSUED:\t21\n",
      "\tMax length: 34\n",
      " 23. RESULT_CODE\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 19\n",
      "\t5 most frequent values:\n",
      "\t\t03:\t14389\n",
      "\t\t00:\t2416\n",
      "\t\t05:\t214\n",
      "\t\t22:\t142\n",
      "\t\t18:\t104\n",
      "\tMax length: 2\n",
      " 24. RESULT_DESC\n",
      "\t<class 'str'>\n",
      "\tNulls: False\n",
      "\tUnique values: 19\n",
      "\t5 most frequent values:\n",
      "\t\tIN COMPLIANCE:\t14389\n",
      "\t\tNOT APPLICABLE:\t2416\n",
      "\t\tDOWNGRADE:\t214\n",
      "\t\tOUT OF BUSINESS:\t142\n",
      "\t\tTRAINING RECEIVED:\t104\n",
      "\tMax length: 37\n",
      " 25. VIOLATION_CODE\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 128\n",
      "\t5 most frequent values:\n",
      "\t\t55:\t6348\n",
      "\t\t00:\t3429\n",
      "\t\t68:\t1658\n",
      "\t\t42:\t487\n",
      "\t\t35:\t441\n",
      "\tMax length: 10\n",
      " 26. VIOLATION_DESC\n",
      "\t<class 'str'>\n",
      "\tNulls: True\n",
      "\tUnique values: 70\n",
      "\t5 most frequent values:\n",
      "\t\tAdditional Comments:\t6353\n",
      "\t\tNo Violations Found:\t3434\n",
      "\t\tDelivered Informational Brochure:\t1657\n",
      "\t\tPlumbing: Improperly installed/maintained/supplied:\t492\n",
      "\t\tNon-Food contact surfaces:\t446\n",
      "\tMax length: 50\n",
      " 27. INSPECTION_MEMO\n",
      "\t<class 'NoneType'>\n",
      "\tNulls: True\n",
      "\tValues: \n",
      "\n",
      "Row count: 17556\n"
     ]
    }
   ],
   "source": [
    "!csvstat abq.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are 12 columns have null values:\n",
    "\n",
    "Site Address\n",
    "\n",
    "Nature Of_Business\n",
    "\n",
    "Street Number\n",
    "\n",
    "Street Name\n",
    "\n",
    "Street Type\n",
    "\n",
    "Post Directional\n",
    "\n",
    "Phone\n",
    "\n",
    "Program Category Description\n",
    "\n",
    "Inspection Type\n",
    "\n",
    "Violation Code\n",
    "\n",
    "Violation Desc\n",
    "\n",
    "Inspection Memo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I am interested in column action_desc,violation_desc and inspection_desc."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 2 - define a database model and load the data (35 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on what you found above, create and connect to a new database, define a database table in it, and load this dataset into it. You may use either of the methods for this step you have seen in earlier class notebooks. You may choose to eliminate variables/columns if they are not relevant or interesting to you - explain your reasoning if you do. Either way, you should load a majority of the columns present in the source dataset into the database and all of its rows.\n",
    "\n",
    "Once your data has loaded successfully, run a COUNT(*) query to verify that all the data has loaded correctly.\n",
    "\n",
    "Insert a combination of code and text/markdown cells here to connect to your database, define your table, load its data, and verify the loaded records."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.5/site-packages/IPython/config.py:13: ShimWarning: The `IPython.config` package has been deprecated. You should import from traitlets.config instead.\n",
      "  \"You should import from traitlets.config instead.\", ShimWarning)\n",
      "/opt/conda/lib/python3.5/site-packages/IPython/utils/traitlets.py:5: UserWarning: IPython.utils.traitlets has moved to a top-level traitlets package.\n",
      "  warn(\"IPython.utils.traitlets has moved to a top-level traitlets package.\")\n"
     ]
    }
   ],
   "source": [
    "%load_ext sql"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[sudo] password for jovyan: Restarting PostgreSQL 9.5 database server: main.\n"
     ]
    }
   ],
   "source": [
    "!echo 'redspot' | sudo -S service postgresql restart"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "!createdb -U dbuser exercise04"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Connected: dbuser@exercise04'"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%sql postgresql://dbuser@localhost:5432/exercise04"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n",
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "DROP TABLE IF EXISTS abqinsspection;\n",
    "CREATE TABLE abqinspection \n",
    "(\n",
    "    FACILITY_NAME VARCHAR(80),\n",
    "    FACILITY_KEY INTEGER,\n",
    "    SITE_ADDRESS VARCHAR(40),\n",
    "    CITY VARCHAR(12),\n",
    "    STATE CHAR(2),\n",
    "    ZIP CHAR(10),\n",
    "    OWNER_KEY INTEGER,\n",
    "    OWNER_NAME VARCHAR(85),\n",
    "    NATURE_OF_BUSINESS VARCHAR(25),\n",
    "    STREET_NUMBER  VARCHAR(7),\n",
    "    STREET_NAME VARCHAR(24),\n",
    "    STREET_TYPE VARCHAR(4),\n",
    "    POST_DIRECTIONAL VARCHAR(3),\n",
    "    PHONE CHAR(15),\n",
    "    PROGRAM_CATEGORY VARCHAR(4),\n",
    "    PROGRAM_CATEGORY_DESCRIPTION VARCHAR(40),\n",
    "    INSPECTION_DATE TIMESTAMP,\n",
    "    INSPECTION_TYPE VARCHAR(4),\n",
    "    INSPECTION_DESC VARCHAR(32),\n",
    "    SERIAL_NUM VARCHAR(9),\n",
    "    ACTION_CODE VARCHAR(2),\n",
    "    ACTION_DESC VARCHAR(40),\n",
    "    RESULT_CODE VARCHAR(2),\n",
    "    RESULT_DESC VARCHAR(40),\n",
    "    VIOLATION_CODE VARCHAR(10),\n",
    "    VIOLATION_DESC VARCHAR(50),\n",
    "    INSPECTION_MEMO VARCHAR(50)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/home/jovyan/work\r\n"
     ]
    }
   ],
   "source": [
    "!pwd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17556 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "COPY abqinspection FROM '/home/jovyan/work/abq.csv'\n",
    "CSV\n",
    "HEADER\n",
    "QUOTE '\"'\n",
    "DELIMITER ',';"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>17556</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(17556,)]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT COUNT(*) FROM abqinspection;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>facility_name</th>\n",
       "        <th>facility_key</th>\n",
       "        <th>site_address</th>\n",
       "        <th>city</th>\n",
       "        <th>state</th>\n",
       "        <th>zip</th>\n",
       "        <th>owner_key</th>\n",
       "        <th>owner_name</th>\n",
       "        <th>nature_of_business</th>\n",
       "        <th>street_number</th>\n",
       "        <th>street_name</th>\n",
       "        <th>street_type</th>\n",
       "        <th>post_directional</th>\n",
       "        <th>phone</th>\n",
       "        <th>program_category</th>\n",
       "        <th>program_category_description</th>\n",
       "        <th>inspection_date</th>\n",
       "        <th>inspection_type</th>\n",
       "        <th>inspection_desc</th>\n",
       "        <th>serial_num</th>\n",
       "        <th>action_code</th>\n",
       "        <th>action_desc</th>\n",
       "        <th>result_code</th>\n",
       "        <th>result_desc</th>\n",
       "        <th>violation_code</th>\n",
       "        <th>violation_desc</th>\n",
       "        <th>inspection_memo</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>00BSAY IT WITH CAKE</td>\n",
       "        <td>50534</td>\n",
       "        <td>10200 GOLF COURSE RD NW STE B</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87114     </td>\n",
       "        <td>47341</td>\n",
       "        <td>OOBSAY IT WITH CAKE</td>\n",
       "        <td>CAKE DECORATING</td>\n",
       "        <td>10200</td>\n",
       "        <td>GOLF COURSE</td>\n",
       "        <td>RD</td>\n",
       "        <td>NW</td>\n",
       "        <td>5058339563     </td>\n",
       "        <td>0405</td>\n",
       "        <td>Food Processor</td>\n",
       "        <td>2009-10-21 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>EMERGENCY RESPONSE</td>\n",
       "        <td>DA8009125</td>\n",
       "        <td>00</td>\n",
       "        <td>NON-GRADED</td>\n",
       "        <td>00</td>\n",
       "        <td>NOT APPLICABLE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;68    </td>\n",
       "        <td>Delivered Informational Brochure</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>00BSAY IT WITH CAKE</td>\n",
       "        <td>50534</td>\n",
       "        <td>10200 GOLF COURSE RD NW STE B</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87114     </td>\n",
       "        <td>47341</td>\n",
       "        <td>OOBSAY IT WITH CAKE</td>\n",
       "        <td>CAKE DECORATING</td>\n",
       "        <td>10200</td>\n",
       "        <td>GOLF COURSE</td>\n",
       "        <td>RD</td>\n",
       "        <td>NW</td>\n",
       "        <td>5058339563     </td>\n",
       "        <td>0405</td>\n",
       "        <td>Food Processor</td>\n",
       "        <td>2009-10-21 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8009123</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;00    </td>\n",
       "        <td>No Violations Found</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>00BSAY IT WITH CAKE</td>\n",
       "        <td>50534</td>\n",
       "        <td>10200 GOLF COURSE RD NW STE B</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87114     </td>\n",
       "        <td>47341</td>\n",
       "        <td>OOBSAY IT WITH CAKE</td>\n",
       "        <td>CAKE DECORATING</td>\n",
       "        <td>10200</td>\n",
       "        <td>GOLF COURSE</td>\n",
       "        <td>RD</td>\n",
       "        <td>NW</td>\n",
       "        <td>5058339563     </td>\n",
       "        <td>0405</td>\n",
       "        <td>Food Processor</td>\n",
       "        <td>2009-10-21 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8009123</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;55    </td>\n",
       "        <td>Additional Comments</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>00BSAY IT WITH CAKE</td>\n",
       "        <td>50534</td>\n",
       "        <td>10200 GOLF COURSE RD NW STE B</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87114     </td>\n",
       "        <td>47341</td>\n",
       "        <td>OOBSAY IT WITH CAKE</td>\n",
       "        <td>CAKE DECORATING</td>\n",
       "        <td>10200</td>\n",
       "        <td>GOLF COURSE</td>\n",
       "        <td>RD</td>\n",
       "        <td>NW</td>\n",
       "        <td>5058339563     </td>\n",
       "        <td>0405</td>\n",
       "        <td>Food Processor</td>\n",
       "        <td>2010-04-14 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8010205</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;00    </td>\n",
       "        <td>No Violations Found</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>00BSAY IT WITH CAKE</td>\n",
       "        <td>50534</td>\n",
       "        <td>10200 GOLF COURSE RD NW STE B</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87114     </td>\n",
       "        <td>47341</td>\n",
       "        <td>OOBSAY IT WITH CAKE</td>\n",
       "        <td>CAKE DECORATING</td>\n",
       "        <td>10200</td>\n",
       "        <td>GOLF COURSE</td>\n",
       "        <td>RD</td>\n",
       "        <td>NW</td>\n",
       "        <td>5058339563     </td>\n",
       "        <td>0405</td>\n",
       "        <td>Food Processor</td>\n",
       "        <td>2010-04-14 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8010205</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;55    </td>\n",
       "        <td>Additional Comments</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2000 VIETNAM RESTAURANT</td>\n",
       "        <td>31468</td>\n",
       "        <td>601 SAN MATEO BLVD SE </td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87108     </td>\n",
       "        <td>29294</td>\n",
       "        <td>2000 VIETMAN RESTAURANT</td>\n",
       "        <td>RESTAURANT</td>\n",
       "        <td>601</td>\n",
       "        <td>SAN MATEO</td>\n",
       "        <td>BLVD</td>\n",
       "        <td>SE</td>\n",
       "        <td>5052320900     </td>\n",
       "        <td>0406</td>\n",
       "        <td>Food Service Establishment</td>\n",
       "        <td>2010-03-23 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8509472</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;34    </td>\n",
       "        <td>Food contact surfaces</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2000 VIETNAM RESTAURANT</td>\n",
       "        <td>31468</td>\n",
       "        <td>601 SAN MATEO BLVD SE </td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87108     </td>\n",
       "        <td>29294</td>\n",
       "        <td>2000 VIETMAN RESTAURANT</td>\n",
       "        <td>RESTAURANT</td>\n",
       "        <td>601</td>\n",
       "        <td>SAN MATEO</td>\n",
       "        <td>BLVD</td>\n",
       "        <td>SE</td>\n",
       "        <td>5052320900     </td>\n",
       "        <td>0406</td>\n",
       "        <td>Food Service Establishment</td>\n",
       "        <td>2010-03-23 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8509472</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;35    </td>\n",
       "        <td>Non-Food contact surfaces</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2000 VIETNAM RESTAURANT</td>\n",
       "        <td>31468</td>\n",
       "        <td>601 SAN MATEO BLVD SE </td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87108     </td>\n",
       "        <td>29294</td>\n",
       "        <td>2000 VIETMAN RESTAURANT</td>\n",
       "        <td>RESTAURANT</td>\n",
       "        <td>601</td>\n",
       "        <td>SAN MATEO</td>\n",
       "        <td>BLVD</td>\n",
       "        <td>SE</td>\n",
       "        <td>5052320900     </td>\n",
       "        <td>0406</td>\n",
       "        <td>Food Service Establishment</td>\n",
       "        <td>2010-03-23 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA8509472</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;55    </td>\n",
       "        <td>Additional Comments</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>328 CHINESE CUISINE</td>\n",
       "        <td>72789</td>\n",
       "        <td>5617 MENAUL BLVD NE STE A</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87110     </td>\n",
       "        <td>66644</td>\n",
       "        <td>328 CHINESE CUISINE</td>\n",
       "        <td>None</td>\n",
       "        <td>5617</td>\n",
       "        <td>MENAUL</td>\n",
       "        <td>BLVD</td>\n",
       "        <td>NE</td>\n",
       "        <td>5058814468     </td>\n",
       "        <td>0406</td>\n",
       "        <td>Food Service Establishment</td>\n",
       "        <td>2009-12-15 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>EMERGENCY RESPONSE</td>\n",
       "        <td>DA7757250</td>\n",
       "        <td>00</td>\n",
       "        <td>NON-GRADED</td>\n",
       "        <td>00</td>\n",
       "        <td>NOT APPLICABLE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;68    </td>\n",
       "        <td>Delivered Informational Brochure</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>328 CHINESE CUISINE</td>\n",
       "        <td>72789</td>\n",
       "        <td>5617 MENAUL BLVD NE STE A</td>\n",
       "        <td>ALBUQUERQUE</td>\n",
       "        <td>NM</td>\n",
       "        <td>87110     </td>\n",
       "        <td>66644</td>\n",
       "        <td>328 CHINESE CUISINE</td>\n",
       "        <td>None</td>\n",
       "        <td>5617</td>\n",
       "        <td>MENAUL</td>\n",
       "        <td>BLVD</td>\n",
       "        <td>NE</td>\n",
       "        <td>5058814468     </td>\n",
       "        <td>0406</td>\n",
       "        <td>Food Service Establishment</td>\n",
       "        <td>2009-12-15 00:00:00</td>\n",
       "        <td>None</td>\n",
       "        <td>ROUTINE FOOD INSPECTION</td>\n",
       "        <td>DA7757248</td>\n",
       "        <td>11</td>\n",
       "        <td>APPROVED</td>\n",
       "        <td>03</td>\n",
       "        <td>IN COMPLIANCE</td>\n",
       "        <td>&nbsp;&nbsp;&nbsp;&nbsp;00    </td>\n",
       "        <td>No Violations Found</td>\n",
       "        <td>None</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('00BSAY IT WITH CAKE', 50534, '10200 GOLF COURSE RD NW STE B', 'ALBUQUERQUE', 'NM', '87114     ', 47341, 'OOBSAY IT WITH CAKE', 'CAKE DECORATING', '10200', 'GOLF COURSE', 'RD', 'NW', '5058339563     ', '0405', 'Food Processor', datetime.datetime(2009, 10, 21, 0, 0), None, 'EMERGENCY RESPONSE', 'DA8009125', '00', 'NON-GRADED', '00', 'NOT APPLICABLE', '    68    ', 'Delivered Informational Brochure', None),\n",
       " ('00BSAY IT WITH CAKE', 50534, '10200 GOLF COURSE RD NW STE B', 'ALBUQUERQUE', 'NM', '87114     ', 47341, 'OOBSAY IT WITH CAKE', 'CAKE DECORATING', '10200', 'GOLF COURSE', 'RD', 'NW', '5058339563     ', '0405', 'Food Processor', datetime.datetime(2009, 10, 21, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8009123', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    00    ', 'No Violations Found', None),\n",
       " ('00BSAY IT WITH CAKE', 50534, '10200 GOLF COURSE RD NW STE B', 'ALBUQUERQUE', 'NM', '87114     ', 47341, 'OOBSAY IT WITH CAKE', 'CAKE DECORATING', '10200', 'GOLF COURSE', 'RD', 'NW', '5058339563     ', '0405', 'Food Processor', datetime.datetime(2009, 10, 21, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8009123', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    55    ', 'Additional Comments', None),\n",
       " ('00BSAY IT WITH CAKE', 50534, '10200 GOLF COURSE RD NW STE B', 'ALBUQUERQUE', 'NM', '87114     ', 47341, 'OOBSAY IT WITH CAKE', 'CAKE DECORATING', '10200', 'GOLF COURSE', 'RD', 'NW', '5058339563     ', '0405', 'Food Processor', datetime.datetime(2010, 4, 14, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8010205', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    00    ', 'No Violations Found', None),\n",
       " ('00BSAY IT WITH CAKE', 50534, '10200 GOLF COURSE RD NW STE B', 'ALBUQUERQUE', 'NM', '87114     ', 47341, 'OOBSAY IT WITH CAKE', 'CAKE DECORATING', '10200', 'GOLF COURSE', 'RD', 'NW', '5058339563     ', '0405', 'Food Processor', datetime.datetime(2010, 4, 14, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8010205', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    55    ', 'Additional Comments', None),\n",
       " ('2000 VIETNAM RESTAURANT', 31468, '601 SAN MATEO BLVD SE ', 'ALBUQUERQUE', 'NM', '87108     ', 29294, '2000 VIETMAN RESTAURANT', 'RESTAURANT', '601', 'SAN MATEO', 'BLVD', 'SE', '5052320900     ', '0406', 'Food Service Establishment', datetime.datetime(2010, 3, 23, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8509472', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    34    ', 'Food contact surfaces', None),\n",
       " ('2000 VIETNAM RESTAURANT', 31468, '601 SAN MATEO BLVD SE ', 'ALBUQUERQUE', 'NM', '87108     ', 29294, '2000 VIETMAN RESTAURANT', 'RESTAURANT', '601', 'SAN MATEO', 'BLVD', 'SE', '5052320900     ', '0406', 'Food Service Establishment', datetime.datetime(2010, 3, 23, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8509472', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    35    ', 'Non-Food contact surfaces', None),\n",
       " ('2000 VIETNAM RESTAURANT', 31468, '601 SAN MATEO BLVD SE ', 'ALBUQUERQUE', 'NM', '87108     ', 29294, '2000 VIETMAN RESTAURANT', 'RESTAURANT', '601', 'SAN MATEO', 'BLVD', 'SE', '5052320900     ', '0406', 'Food Service Establishment', datetime.datetime(2010, 3, 23, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA8509472', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    55    ', 'Additional Comments', None),\n",
       " ('328 CHINESE CUISINE', 72789, '5617 MENAUL BLVD NE STE A', 'ALBUQUERQUE', 'NM', '87110     ', 66644, '328 CHINESE CUISINE', None, '5617', 'MENAUL', 'BLVD', 'NE', '5058814468     ', '0406', 'Food Service Establishment', datetime.datetime(2009, 12, 15, 0, 0), None, 'EMERGENCY RESPONSE', 'DA7757250', '00', 'NON-GRADED', '00', 'NOT APPLICABLE', '    68    ', 'Delivered Informational Brochure', None),\n",
       " ('328 CHINESE CUISINE', 72789, '5617 MENAUL BLVD NE STE A', 'ALBUQUERQUE', 'NM', '87110     ', 66644, '328 CHINESE CUISINE', None, '5617', 'MENAUL', 'BLVD', 'NE', '5058814468     ', '0406', 'Food Service Establishment', datetime.datetime(2009, 12, 15, 0, 0), None, 'ROUTINE FOOD INSPECTION', 'DA7757248', '11', 'APPROVED', '03', 'IN COMPLIANCE', '    00    ', 'No Violations Found', None)]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT * FROM abqinspection\n",
    "LIMIT 10;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "27 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>column_name</th>\n",
       "        <th>data_type</th>\n",
       "        <th>character_maximum_length</th>\n",
       "        <th>is_nullable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>facility_name</td>\n",
       "        <td>character varying</td>\n",
       "        <td>80</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>facility_key</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>site_address</td>\n",
       "        <td>character varying</td>\n",
       "        <td>40</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>city</td>\n",
       "        <td>character varying</td>\n",
       "        <td>12</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>state</td>\n",
       "        <td>character</td>\n",
       "        <td>2</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>zip</td>\n",
       "        <td>character</td>\n",
       "        <td>10</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>owner_key</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>owner_name</td>\n",
       "        <td>character varying</td>\n",
       "        <td>85</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>nature_of_business</td>\n",
       "        <td>character varying</td>\n",
       "        <td>25</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>street_number</td>\n",
       "        <td>character varying</td>\n",
       "        <td>7</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>street_name</td>\n",
       "        <td>character varying</td>\n",
       "        <td>24</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>street_type</td>\n",
       "        <td>character varying</td>\n",
       "        <td>4</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>post_directional</td>\n",
       "        <td>character varying</td>\n",
       "        <td>3</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>phone</td>\n",
       "        <td>character</td>\n",
       "        <td>15</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>program_category</td>\n",
       "        <td>character varying</td>\n",
       "        <td>4</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>program_category_description</td>\n",
       "        <td>character varying</td>\n",
       "        <td>40</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>inspection_date</td>\n",
       "        <td>timestamp without time zone</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>inspection_type</td>\n",
       "        <td>character varying</td>\n",
       "        <td>4</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>inspection_desc</td>\n",
       "        <td>character varying</td>\n",
       "        <td>32</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>serial_num</td>\n",
       "        <td>character varying</td>\n",
       "        <td>9</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>action_code</td>\n",
       "        <td>character varying</td>\n",
       "        <td>2</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>action_desc</td>\n",
       "        <td>character varying</td>\n",
       "        <td>40</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>result_code</td>\n",
       "        <td>character varying</td>\n",
       "        <td>2</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>result_desc</td>\n",
       "        <td>character varying</td>\n",
       "        <td>40</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>violation_code</td>\n",
       "        <td>character varying</td>\n",
       "        <td>10</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>violation_desc</td>\n",
       "        <td>character varying</td>\n",
       "        <td>50</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>inspection_memo</td>\n",
       "        <td>character varying</td>\n",
       "        <td>50</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('facility_name', 'character varying', 80, 'YES'),\n",
       " ('facility_key', 'integer', None, 'YES'),\n",
       " ('site_address', 'character varying', 40, 'YES'),\n",
       " ('city', 'character varying', 12, 'YES'),\n",
       " ('state', 'character', 2, 'YES'),\n",
       " ('zip', 'character', 10, 'YES'),\n",
       " ('owner_key', 'integer', None, 'YES'),\n",
       " ('owner_name', 'character varying', 85, 'YES'),\n",
       " ('nature_of_business', 'character varying', 25, 'YES'),\n",
       " ('street_number', 'character varying', 7, 'YES'),\n",
       " ('street_name', 'character varying', 24, 'YES'),\n",
       " ('street_type', 'character varying', 4, 'YES'),\n",
       " ('post_directional', 'character varying', 3, 'YES'),\n",
       " ('phone', 'character', 15, 'YES'),\n",
       " ('program_category', 'character varying', 4, 'YES'),\n",
       " ('program_category_description', 'character varying', 40, 'YES'),\n",
       " ('inspection_date', 'timestamp without time zone', None, 'YES'),\n",
       " ('inspection_type', 'character varying', 4, 'YES'),\n",
       " ('inspection_desc', 'character varying', 32, 'YES'),\n",
       " ('serial_num', 'character varying', 9, 'YES'),\n",
       " ('action_code', 'character varying', 2, 'YES'),\n",
       " ('action_desc', 'character varying', 40, 'YES'),\n",
       " ('result_code', 'character varying', 2, 'YES'),\n",
       " ('result_desc', 'character varying', 40, 'YES'),\n",
       " ('violation_code', 'character varying', 10, 'YES'),\n",
       " ('violation_desc', 'character varying', 50, 'YES'),\n",
       " ('inspection_memo', 'character varying', 50, 'YES')]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT column_name, data_type, character_maximum_length, is_nullable\n",
    "FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'abqinspection';"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem 3 - explore your data (30 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that the data is loaded, ask some questions of it! Identify key variables of interest and note their ranges along with other useful descriptive statistics. Choose and define a few lines of inquiry, execute queries for each, and describe what you find in your result sets. Use any query techniques we've seen in class, including aggregate functions, transformations, subqueries, or others as appropriate.\n",
    "\n",
    "If you find interesting patterns, adding plots to your exploration would be useful.\n",
    "\n",
    "Insert a combination of code and text/markdown cells here to explore your data."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Transofrmation of Inspection date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n",
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "DROP TABLE IF EXISTS ins_days;\n",
    "CREATE TABLE ins_days (\n",
    "    id SERIAL,\n",
    "    day_of_year CHAR(10),\n",
    "    year INTEGER,\n",
    "    month INTEGER,\n",
    "    day INTEGER,\n",
    "    day_of_week_str CHAR(9),\n",
    "    day_of_week INTEGER,\n",
    "    is_weekend BOOLEAN,\n",
    "    is_weekday BOOLEAN,\n",
    "    hour_24 INTEGER,\n",
    "    quarter INTEGER\n",
    ");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "258 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "INSERT INTO ins_days (day_of_year, year, month, day, day_of_week_str, day_of_week,\n",
    "                  is_weekend, is_weekday, hour_24, quarter)\n",
    "SELECT DISTINCT TO_CHAR(inspection_date, 'YYYY-MM-DD') AS day_of_year, \n",
    "    CAST(TO_CHAR(inspection_date, 'YYYY') AS INTEGER) AS year,\n",
    "    CAST(TO_CHAR(inspection_date, 'MM') AS INTEGER) AS month,\n",
    "    CAST(TO_CHAR(inspection_date, 'DD') AS INTEGER) AS day,\n",
    "    TO_CHAR(inspection_date, 'Day') AS day_of_week_str,\n",
    "    CAST(TO_CHAR(inspection_date, 'D') AS INTEGER) AS day_of_week,\n",
    "    CASE WHEN CAST(TO_CHAR(inspection_date, 'D') AS INTEGER) IN (1, 7) \n",
    "        THEN TRUE\n",
    "        ELSE FALSE\n",
    "    END AS is_weekend,\n",
    "    CASE WHEN CAST(TO_CHAR(inspection_date, 'D') AS INTEGER) NOT IN (1, 7) \n",
    "        THEN TRUE\n",
    "        ELSE FALSE\n",
    "    END AS is_weekday,\n",
    "    CAST(TO_CHAR(inspection_date, 'HH24') AS INTEGER) AS hour_24,\n",
    "    CAST(TO_CHAR(inspection_date, 'Q') AS INTEGER) AS quarter\n",
    "FROM abqinspection;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>id</th>\n",
       "        <th>day_of_year</th>\n",
       "        <th>year</th>\n",
       "        <th>month</th>\n",
       "        <th>day</th>\n",
       "        <th>day_of_week_str</th>\n",
       "        <th>day_of_week</th>\n",
       "        <th>is_weekend</th>\n",
       "        <th>is_weekday</th>\n",
       "        <th>hour_24</th>\n",
       "        <th>quarter</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>1</td>\n",
       "        <td>2009-11-05</td>\n",
       "        <td>2009</td>\n",
       "        <td>11</td>\n",
       "        <td>5</td>\n",
       "        <td>Thursday </td>\n",
       "        <td>5</td>\n",
       "        <td>False</td>\n",
       "        <td>True</td>\n",
       "        <td>0</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>2</td>\n",
       "        <td>2009-08-24</td>\n",
       "        <td>2009</td>\n",
       "        <td>8</td>\n",
       "        <td>24</td>\n",
       "        <td>Monday   </td>\n",
       "        <td>2</td>\n",
       "        <td>False</td>\n",
       "        <td>True</td>\n",
       "        <td>0</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>3</td>\n",
       "        <td>2009-08-19</td>\n",
       "        <td>2009</td>\n",
       "        <td>8</td>\n",
       "        <td>19</td>\n",
       "        <td>Wednesday</td>\n",
       "        <td>4</td>\n",
       "        <td>False</td>\n",
       "        <td>True</td>\n",
       "        <td>0</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>4</td>\n",
       "        <td>2009-10-09</td>\n",
       "        <td>2009</td>\n",
       "        <td>10</td>\n",
       "        <td>9</td>\n",
       "        <td>Friday   </td>\n",
       "        <td>6</td>\n",
       "        <td>False</td>\n",
       "        <td>True</td>\n",
       "        <td>0</td>\n",
       "        <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>5</td>\n",
       "        <td>2009-09-29</td>\n",
       "        <td>2009</td>\n",
       "        <td>9</td>\n",
       "        <td>29</td>\n",
       "        <td>Tuesday  </td>\n",
       "        <td>3</td>\n",
       "        <td>False</td>\n",
       "        <td>True</td>\n",
       "        <td>0</td>\n",
       "        <td>3</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(1, '2009-11-05', 2009, 11, 5, 'Thursday ', 5, False, True, 0, 4),\n",
       " (2, '2009-08-24', 2009, 8, 24, 'Monday   ', 2, False, True, 0, 3),\n",
       " (3, '2009-08-19', 2009, 8, 19, 'Wednesday', 4, False, True, 0, 3),\n",
       " (4, '2009-10-09', 2009, 10, 9, 'Friday   ', 6, False, True, 0, 4),\n",
       " (5, '2009-09-29', 2009, 9, 29, 'Tuesday  ', 3, False, True, 0, 3)]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "select * from ins_days\n",
    "LIMIT 5;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>column_name</th>\n",
       "        <th>data_type</th>\n",
       "        <th>character_maximum_length</th>\n",
       "        <th>is_nullable</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>id</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>NO</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>day_of_year</td>\n",
       "        <td>character</td>\n",
       "        <td>10</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>year</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>month</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>day</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>day_of_week_str</td>\n",
       "        <td>character</td>\n",
       "        <td>9</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>day_of_week</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>is_weekend</td>\n",
       "        <td>boolean</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>is_weekday</td>\n",
       "        <td>boolean</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>hour_24</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>quarter</td>\n",
       "        <td>integer</td>\n",
       "        <td>None</td>\n",
       "        <td>YES</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('id', 'integer', None, 'NO'),\n",
       " ('day_of_year', 'character', 10, 'YES'),\n",
       " ('year', 'integer', None, 'YES'),\n",
       " ('month', 'integer', None, 'YES'),\n",
       " ('day', 'integer', None, 'YES'),\n",
       " ('day_of_week_str', 'character', 9, 'YES'),\n",
       " ('day_of_week', 'integer', None, 'YES'),\n",
       " ('is_weekend', 'boolean', None, 'YES'),\n",
       " ('is_weekday', 'boolean', None, 'YES'),\n",
       " ('hour_24', 'integer', None, 'YES'),\n",
       " ('quarter', 'integer', None, 'YES')]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT column_name, data_type, character_maximum_length, is_nullable\n",
    "FROM INFORMATION_SCHEMA.COLUMNS WHERE table_name = 'ins_days';"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Qusetion: In the quarter with most inspections, how many inspections in each weekday?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, I used subquery to firstly select quarter with most inspections and then count day_of_week_str."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>day_of_week_str</th>\n",
       "        <th>c</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Monday   </td>\n",
       "        <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Thursday </td>\n",
       "        <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Friday   </td>\n",
       "        <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Wednesday</td>\n",
       "        <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>Tuesday  </td>\n",
       "        <td>13</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('Monday   ', 11),\n",
       " ('Thursday ', 12),\n",
       " ('Friday   ', 12),\n",
       " ('Wednesday', 13),\n",
       " ('Tuesday  ', 13)]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT day_of_week_str,COUNT(*) AS c\n",
    "FROM ins_days\n",
    "WHERE quarter IN\n",
    "    (SELECT quarter\n",
    "     FROM ins_days\n",
    "     GROUP BY quarter\n",
    "     ORDER BY COUNT(*)\n",
    "     LIMIT 1)\n",
    "GROUP BY day_of_week_str\n",
    "ORDER BY COUNT(*);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question: Which nature of business have most  types of violation?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Firstly, I used subquery to firstly select violation_desc as a table and then count rows of new table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>nature_of_business</th>\n",
       "        <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>RESTAURANT</td>\n",
       "        <td>67</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[('RESTAURANT', 67)]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "SELECT DISTINCT nature_of_business,count(*) FROM\n",
    "(\n",
    "    SELECT nature_of_business,COUNT(violation_desc)AS c,violation_desc\n",
    "    FROM abqinspection\n",
    "    GROUP BY nature_of_business,violation_desc\n",
    "    ORDER BY c DESC,nature_of_business\n",
    ") AS ins\n",
    "GROUP BY nature_of_business\n",
    "ORDER BY count(*) DESC\n",
    "LIMIT 1;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bonus (10 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have seen a few simple techniques for normalizing data in class. Choose a column or set of columns that might be redundant and normalize them out to another table:\n",
    "\n",
    "Identify the columns to normalize in the source data table\n",
    "\n",
    "Create one or more new tables to hold the normalized records\n",
    "\n",
    "Extract data into the new tables\n",
    "\n",
    "Re-insert the new foreign key references from the new table into the source table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>count</th>\n",
       "        <th>attribute_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>19</td>\n",
       "        <td>result_code</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>19</td>\n",
       "        <td>result_desc</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(19, 'result_code'), (19, 'result_desc')]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    "SELECT COUNT(*),'result_code' as attribute_name FROM (SELECT DISTINCT result_code FROM abqinspection)table1 \n",
    "UNION \n",
    "SELECT COUNT(*),'result_desc' as attribute_name FROM (SELECT DISTINCT result_desc FROM abqinspection)table2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>count</th>\n",
       "        <th>attribute_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>71</td>\n",
       "        <td>violation_desc</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>133</td>\n",
       "        <td>violation_code</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(71, 'violation_desc'), (133, 'violation_code')]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    "SELECT COUNT(*),'violation_code' as attribute_name FROM (SELECT DISTINCT violation_code FROM abqinspection)table1 \n",
    "UNION \n",
    "SELECT COUNT(*),'violation_desc' as attribute_name FROM (SELECT DISTINCT violation_desc FROM abqinspection)table2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2 rows affected.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <th>count</th>\n",
       "        <th>attribute_name</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>8</td>\n",
       "        <td>action_code</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "        <td>8</td>\n",
       "        <td>action_desc</td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "[(8, 'action_code'), (8, 'action_desc')]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql \n",
    "SELECT COUNT(*),'action_code' as attribute_name FROM (SELECT DISTINCT action_code FROM abqinspection)table1 \n",
    "UNION \n",
    "SELECT COUNT(*),'action_desc' as attribute_name FROM (SELECT DISTINCT action_desc FROM abqinspection)table2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n",
      "Done.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%sql\n",
    "DROP TABLE IF EXISTS abqnormal1;\n",
    "CREATE TABLE abqnormal \n",
    "(\n",
    "    ACTION_CODE VARCHAR(2),\n",
    "    ACTION_DESC VARCHAR(40)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%%sql\n",
    "ALTER TABLE abqnormal1\n",
    "ADD CONSTRAINT result_fk FOREIGN KEY (result_code)\n",
    "REFERENCES resultkey (result_code) ON DELETE NO ACTION;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Done.\n",
      "(psycopg2.ProgrammingError) relation \"abqnormal\" already exists\n",
      " [SQL: 'CREATE TABLE abqnormal \\n(\\n    RESULT_CODE VARCHAR(2),\\n    RESULT_DESC VARCHAR(40)\\n)']\n"
     ]
    }
   ],
   "source": [
    "%%sql\n",
    "DROP TABLE IF EXISTS abqnormal2;\n",
    "CREATE TABLE abqnormal \n",
    "(\n",
    "    RESULT_CODE VARCHAR(2),\n",
    "    RESULT_DESC VARCHAR(40)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "%%sql\n",
    "ALTER TABLE abqnormal2\n",
    "ADD CONSTRAINT action_fk FOREIGN KEY (action_code)\n",
    "REFERENCES actionkey (action_code) ON DELETE NO ACTION;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
